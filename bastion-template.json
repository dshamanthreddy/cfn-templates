{
  "AWSTemplateFormatVersion" : "2010-09-09",
  "Description" : "BastionHost On Demand template.",

  "Parameters" : {

    "aBastionCount" : {
        "Type"                          : "Number",
        "Default"                       : "1",
        "MinValue"                      : "0",
        "MaxValue"                      : "1",
        "Description"                   : "Enter '1' to launch a bastion host, or '0' to terminate."
    },
    "bInstanceType" : {
        "Type"                          : "String",
        "Default"                       : "m3.medium",
        "AllowedValues"                 : [ "t2.micro", "t2.small", "t2.medium", "m3.medium", "m3.large", "m3.xlarge" ],
        "Description"                   : "The instance size desired."
    },
    "cUserKeys" : {
        "Type"                          : "AWS::EC2::KeyPair::KeyName",
        "Description"                   : "Bastion SSH PEM key name."
    },
    "dVPCId" : {
        "Type"                          : "AWS::EC2::VPC::Id",
        "Description"                   : "Your VPC Id."
    },
    "eAvailZone" : {
        "Type"                          : "AWS::EC2::AvailabilityZone::Name",
        "Description"                   : "Availability zone."
    },
    "fPublicSubnet" : {
        "Type"                          : "AWS::EC2::Subnet::Id",
        "Description"                   : "Public subnet Id. (Note: Subnet should be located in the same AvailZone.)"
    },
    "gPermitCIDR" : {
        "Type"                          : "String",
        "Default"                       : "10.79.10.0/24",
        "Description"                   : "Enter the CIDR or IP address to permit SSH from. (Note: Used to create a bastion security group.)",
        "AllowedPattern"                : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
        "ConstraintDescription"         : "Please enter a valid IP CIDR range of the form x.x.x.x/x."
    },
    "hBastionName" : {
        "Type"                          : "String",
        "Default"                       : "bastion-srv-az1",
        "AllowedPattern"                : "[-a-zA-Z0-9]*",
        "Description"                   : "Instance name (for tagging)."
    }
  },

  "Mappings" : {

    "RegionLinuxAMI" : {
        "us-east-1"                     : { "AMI" : "ami-08842d60" },
        "eu-west-1"                     : { "AMI" : "ami-748e2903" },
        "ap-northeast-1"                : { "AMI" : "ami-35072834" },
        "us-west-1"                     : { "AMI" : "ami-cfa8a18a" },
        "us-west-2"                     : { "AMI" : "ami-8786c6b7" },
        "ap-southeast-1"                : { "AMI" : "ami-d6e1c584" },
        "ap-southeast-2"                : { "AMI" : "ami-fd4724c7" },
        "sa-east-1"                     : { "AMI" : "ami-956cc688" },
        "eu-central-1"                  : { "AMI" : "ami-b43503a9" }
    }
  },

  "Resources" : {

    "asBastionlaunch" : {
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "DependsOn" : [ "ec2BastionSecurityGroup" ],
        "Metadata" : {
        "Comment" : "Setup iptables and disable unwanted services",
          "AWS::CloudFormation::Init" : {
            "config" : {
              "commands" : {
                "iptables.sh" : {
                  "command" : {
                    "Fn::Join" : [ "",
                    [ "/sbin/iptables -F\n", 
                      "/sbin/iptables -P INPUT DROP\n",
                      "/sbin/iptables -P FORWARD DROP\n",
                      "/sbin/iptables -P OUTPUT ACCEPT\n",
                      "/sbin/iptables -A INPUT -p tcp --dport 22 -s ", { "Ref" : "gPermitCIDR" }, " -j ACCEPT\n",
                      "/sbin/iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT\n",
                      "/sbin/iptables -A INPUT -i lo -j ACCEPT\n",
                      "/sbin/service iptables save\n" ]
                    ]
              } } },
              "files" : {
                "/etc/cfn/cfn-hup.conf" : {
                  "content" : { "Fn::Join" : [ "", [
                    "[main]\n",
                    "stack=", { "Ref" : "AWS::StackId" }, "\n",
                    "region=", { "Ref" : "AWS::Region" }, "\n"
                  ] ] },
                  "mode"    : "000400",
                  "owner"   : "root",
                  "group"   : "root"
                },
                "/etc/cfn/hooks.d/cfn-auto-reloader.conf" : {
                  "content": { "Fn::Join" : [ "", [
                    "[cfn-auto-reloader-hook]\n",
                    "triggers=post.update\n",
                    "path=Resources.asBastionlaunch.Metadata.AWS::CloudFormation::Init\n",
                    "action=/opt/aws/bin/cfn-init -v ",
                    " --stack ", { "Ref" : "AWS::StackName" },
                    " --resource asBastionlaunch ",
                    " --region ", { "Ref" : "AWS::Region" }, "\n",
                    "runas=root\n"
                  ] ] },
                  "mode"    : "000400",
                  "owner"   : "root",
                  "group"   : "root"
                }
              },
              "services" : {
                "sysvinit" : {
                  "sendmail" : {
                    "enabled" : "false",
                    "ensureRunning" : "false"
                  },
                  "iptables" : {
                    "enabled" : "true",
                    "ensureRunning" : "true"
                  },
                  "cfn-hup" : {
                    "enabled" : "true",
                    "ensureRunning" : "true",
                    "files" : [ "/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf" ]
              } } }
            }
          }
        },
      "Properties" : {
        "ImageId"                       : { "Fn::FindInMap" : [ "RegionLinuxAMI", { "Ref" : "AWS::Region" }, "AMI" ] },
        "KeyName"                       : { "Ref" : "cUserKeys" },
        "InstanceType"                  : { "Ref" : "bInstanceType" },
        "InstanceMonitoring"            : "false",
        "AssociatePublicIpAddress"      : "true",
        "SecurityGroups"                : [ { "Ref" : "ec2BastionSecurityGroup" } ],
        "UserData" : {
          "Fn::Base64" : {
            "Fn::Join" : [ "",
            [ "#!/bin/bash -ex\n",
              "yum update -y aws-cfn-bootstrap\n",
              "yum update -y\n",

              "# Work on Metadata.\n",
              "/opt/aws/bin/cfn-init -v",
              " --stack ", { "Ref" : "AWS::StackName" },
              " --resource asBastionlaunch",
              " --region ", { "Ref" : "AWS::Region" }, "\n" ]
            ]
          }
        }
      }
    },
    "asBastiongroup" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "AvailabilityZones"             : [ { "Ref" : "eAvailZone" } ],
        "VPCZoneIdentifier"             : [ { "Ref" : "fPublicSubnet" } ],
        "Cooldown"                      : "120",
        "DesiredCapacity"               : { "Ref" : "aBastionCount" },
        "MaxSize"                       : "1",
        "MinSize"                       : "0",
        "HealthCheckGracePeriod"        : "180",
        "LaunchConfigurationName"       : { "Ref" : "asBastionlaunch" },
        "Tags": [
          { "Key" : "Stack", "Value" : { "Ref" : "AWS::StackName" }, "PropagateAtLaunch" : true },
          { "Key" : "Name", "Value" : { "Ref" : "hBastionName" }, "PropagateAtLaunch" : true }
        ]
      }
    },

    "ec2BastionSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription"              : "Security group for our bastion instance.",
        "VpcId"                         : { "Ref" : "dVPCId" },
        "Tags": [
          { "Key" : "Stack", "Value" : { "Ref" : "AWS::StackName"} },
          { "Key" : "Name", "Value" : "BastionSG" }
        ],
        "SecurityGroupIngress" : [
          { "IpProtocol"                : "tcp",
            "FromPort"                  : "22",
            "ToPort"                    : "22",
            "CidrIp"                    : { "Ref" : "gPermitCIDR" }
          }
        ]
      }
    }
  }
}
